<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.fizzy.postservice.mapper.PostMapper">
    <resultMap id="BaseResultMap" type="com.fizzy.core.entity.Post">
        <!-- 用id属性来映射主键字段 -->
        <id column="id" jdbcType="INTEGER" property="id" />
        <!-- 用result属性来映射非主键字段 -->
        <result column="title" jdbcType="VARCHAR" property="title" />
        <result column="post_user_id" jdbcType="INTEGER" property="postUserId" />
        <result column="content" jdbcType="VARCHAR" property="content" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="likes" jdbcType="INTEGER" property="likes" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="votes" jdbcType="VARCHAR"  property="votes" />
        <result column="community" jdbcType="INTEGER" property="community" />
        <result column="type" jdbcType="INTEGER" property="type" />
    </resultMap>
    <resultMap id="postVoMap" type="com.fizzy.postservice.entity.PostVo">
        <!-- 用id属性来映射主键字段 -->
        <id column="id" jdbcType="INTEGER" property="id" />
        <!-- 用result属性来映射非主键字段 -->
        <result column="title" jdbcType="VARCHAR" property="title" />
        <result column="username" jdbcType="VARCHAR" property="postUserName" />
        <result column="content" jdbcType="VARCHAR" property="content" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="likes" jdbcType="INTEGER" property="likes" />
        <result column="comment_num" jdbcType="INTEGER" property="commentNum" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="votes" jdbcType="VARCHAR"  property="votes" />
        <result column="name" jdbcType="VARCHAR"  property="community" />
        <result column="type" jdbcType="INTEGER" property="type" />
    </resultMap>
    <!--查找所有帖子-->
    <select id="findAllPost" resultType="com.fizzy.core.entity.Post" resultMap="BaseResultMap">
        select * from post
    </select>

    <!--根据status查找所有帖子-->
    <select id="findAllPostByStatus" parameterType="java.lang.Integer" resultType="com.fizzy.core.entity.Post" resultMap="BaseResultMap">
        select * from post where status = #{status}
    </select>

    <!--根据status查找所有帖子-->
    <select id="findAllPostVoByStatus" parameterType="java.lang.Integer" resultType="com.fizzy.postservice.entity.PostVo" resultMap="postVoMap">
        SELECT
            p.id,
            p.title,
            p.content,
            p.create_time,
            p.likes,
            p.votes,
            p.`status`,
            u.username,
            c.`name`
        FROM
            post p
                LEFT JOIN sys_user u ON u.user_id = p.post_user_id
                LEFT JOIN community c ON c.id = p.community
        WHERE
            p.`status` = #{status}
    </select>

    <!--条件查询帖子vo-->
    <select id="selectPostVo" parameterType="com.fizzy.core.entity.Post"
            resultType="com.fizzy.postservice.entity.PostVo" resultMap="postVoMap">
        SELECT
        p.id,
        p.title,
        p.content,
        p.create_time,
        p.likes,
        p.type,
        t1.comment_num,
        p.votes,
        p.`status`,
        u.username,
        c.`name`
        FROM
        post p
        LEFT JOIN sys_user u ON u.user_id = p.post_user_id
        LEFT JOIN community c ON c.id = p.community
        LEFT JOIN (SELECT belong, count(belong) comment_num FROM `comment` GROUP BY belong) t1
        ON p.id = t1.belong
        <where>
            <if test="id!=null and id!=0">
                AND p.id = #{id}
            </if>
            <if test="postUserId!=null and postUserId!=0">
                AND p.post_user_id = #{postUserId}
            </if>
            <if test="postUserName!=null">
                AND u.username LIKE CONCAT('%', CONCAT(#{postUserName}, '%'))
            </if>
            <if test="title!=null">
                AND p.title LIKE CONCAT('%', CONCAT(#{title}, '%'))
            </if>
            <if test="createTimeStart!=null">
                AND p.create_time>#{createTimeStart}
            </if>
            <if test="createTimeEnd!=null">
                AND #{createTimeEnd}>p.create_time
            </if>
            <if test="status!=null and status!=0">
                AND p.`status` = #{status}
            </if>
            <if test="community!=null and community!=0">
                AND p.community=#{community}
            </if>
        </where>
        order by
        <choose>
            <when test='type!=null and type!=0'>p.type desc, create_time desc</when>
            <otherwise> p.create_time desc </otherwise>
        </choose>
    </select>

    <!--条件查询帖子vo-->
    <select id="selectPostVoByIds" parameterType="java.util.List"
            resultType="com.fizzy.postservice.entity.PostVo" resultMap="postVoMap">
        SELECT
        p.id,
        p.title,
        p.content,
        p.create_time,
        p.likes,
        p.type,
        t1.comment_num,
        p.votes,
        p.`status`,
        u.username,
        c.`name`
        FROM
        post p
        LEFT JOIN sys_user u ON u.user_id = p.post_user_id
        LEFT JOIN community c ON c.id = p.community
        LEFT JOIN (SELECT belong, count(belong) comment_num FROM `comment` GROUP BY belong) t1
        ON p.id = t1.belong

                <where>
                    <foreach collection="ids" open="and p.id in(" close=")" item="id" separator=",">
                        #{id}
                    </foreach>
                </where>
        order by p.create_time desc
    </select>

    <!--通过id查找帖子-->
    <select id="findPostById" parameterType="com.fizzy.core.entity.Post" resultType="com.fizzy.core.entity.Post" resultMap="BaseResultMap">
        select * from post where id = #{id}
    </select>

    <!-- 插入一个帖子 -->
    <insert id="insertOne" parameterType="com.fizzy.core.entity.Post" useGeneratedKeys="true" keyProperty="id">
        insert into post (title, post_user_id, content, create_time, likes, status, votes, community, type)
        values (#{title}, #{postUserId}, #{content}, #{createTime},#{likes},#{status}, #{votes}, #{community},#{type})
    </insert>


    <!-- 全部更新 -->
    <update id="updateAll" parameterType="com.fizzy.core.entity.Post">
        update post set title=#{title},post_user_id=#{postUserId},content=#{content},type=#{type},
                           create_time=#{createTime},likes=#{likes},status=#{status},votes=#{votes},community=#{community}
                where id=#{id}
    </update>

    <!-- 物理删除 -->
    <delete id="deleteById" parameterType="java.lang.Integer">
        delete from post where id = #{id}
    </delete>

</mapper>